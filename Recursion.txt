=========================RECURSION==================================


Applications of recursion:
1) Many algorithms techniques are based on recursion:
	--dynamic programming - in dynamic programming the first step is to write the recursive solution
		if we see any overlap situation then we optimiz it using dynamic programming.
	--Backtracking
	--divide and conquer, binary search,quicksort and merge sort
2) Many problems inherently recursive	
	--Tower Hanoi
	-- DFS based traversals(DFS of graph amd Inorder/preorder/postorder traversal of tree).

Recursive output practise 1:
			void fun(int n)
			{
				if(n == 0)        o/p: fun(3)
					return;                 ->3
										   fun(2)
				cout<<n<<endl;         		 ->2
											fun(1)
				fun(n - 1);					 ->1
											  fun(0)	
				cout<<n<<endl;					1<-
			}								   2<-
			int main() {					  3<-
				
				fun(3);				
				
				return 0;					
			}	
Recursive output practise 2:
			void fun(int n)             
			{
				if(n == 0)           o/p: 1
					return;				  2
										  1
				fun(n - 1); 			  3
										  1
				cout<<n<<endl;			  1
										  2
				fun(n - 1);				  1
			}
			int main() {
				
				fun(3);
				
				return 0;
			}

Example1: 
	(logN with base 2)
		int fun(int n)
		{
			if(n == 1)
				return 0;
			else
				return 1 + fun(n / 2);  // for fun(n/3) - it will give log(n) base3
		}
		int main() {
			
			cout<<fun(16);
			
			return 0;
		}

Example 2(Binary Representation)
		void fun(int n)
		{
			if(n == 0)
				return;
			
			fun(n / 2);

			cout<<(n % 2)<<endl; o/P for fun(7) = 111(which is binary equivalent of 7)
		}
		int main() {
			
			fun(7);
			
			return 0;
		}

example3:
	printing numbers from 1 to N:
			void printToN(int n)
			{
				if(n == 0)
					return;
				
				printToN(n - 1);

				cout<<n<<" ";

			}
	printing numbers from N to 1:
			void printToN(int n)
			{
				if(n == 0)
					return;

				cout<<n<<" ";
				
				printToN(n - 1);

			}
======================================================
TAIL RECURSION:	

	A function is called tail recursive when the parent func is nothing to do when the clid func finished its execution
		eg: printing number from N to 1.
		Modern compilers optimizes tail rcursion problems awhich takes less time to excute than non tail recursions.
			printing numbers from N to 1:
			void printToN(int n)
			{							START:     
				if(n == 0)								
					return;						
												this is the kind of optimization modern compilers do for tail recursion.
				cout<<n<<" ";						
				
				printToN(n - 1);		n = n-1				
										goto START
			}
			
	We can convert non tail recursion codes to tail recursion:
		eg:
			void printToN(int n)         
			{
				if(n == 0)
					return;
				
				printToN(n - 1);

				cout<<n<<" ";

			}
			
			can be returned as:
			
			void fun(int n, int k)  // k should be given as 1 every time if we want to print from 1 to n
			{
				if(n == 0)
					return;

				cout<<k<<" ";

				fun(n - 1, k + 1);

			}
	Eg:
		tail recursvive function for recursion: factorial function.
				int fact(int n, int k)
				{
					if(n == 0 || n == 1)
						return k;

					return fact(n - 1, k * n); //initially k = 1

				}
----------------------------------------------------------------
SUM OF NNUMBERS USING RECURSION:
	int getSum(int n)
	{
		if(n == 0)
			return 0;

		return n + getSum(n - 1);

	}
------------------------------------------------------------------	
FIBANACCI OF A NUMBER USING RECURSION:
	int fib(int n)
	{
		if (n <= 1)
			return n;
		return fib(n-1) + fib(n-2);
	}
------------------------------------------------------------------
PALINDROME CHECK USING RECURSION:
	bool isPalindrome(string str, int start, int end)
	{
		if(start >= end)
			return true;

		return ((str[start]==str[end]) && 
				 isPalindrome(str, start + 1, end - 1));
	}
-------------------------------------------------------------------
SUM OF DIGITS USING RECURSION: nut the iterative solution of this problem is preferred 
	int fun(int n)
	{
		if(n < 10)
			return n;

		return fun(n / 10) + n % 10;
	}
--------------------------------------------------------------------
ROPE CUTTING PROBLEM:
we need to cut he ropes such that we will have maximum number of pieces.
	I/P:
		n=5, a=2, b=5, c=1
		O/P: 5 => 5 cuts with size 1
	I/P:
		n = 23, a= 12, b=9, c=11
		O/P: 2
	I/P: 	
		n = 5, a=4, c=6
		O/P: -1
	int maxCuts(int n, int a, int b, int c)
	{
		if(n == 0)
			return 0;
		if(n <= -1)
			return -1;

		int res = max(maxCuts(n-a, a, b, c), 
				  max(maxCuts(n-b, a, b, c), 
				  maxCuts(n-c, a, b, c)));

		if(res == -1)
			return -1;

		return res + 1; 
	}
----------------------------------------------------------------------
GENERATE SUBSETS OF A GIVEN STRING:
	 there is  already an iterative solution for this using bit magic,
	 here we use recursion.
	 
		void printSub(string str, string curr, int index)
			{
				if(index == str.length())
				{
					cout<<curr<<" ";
					return;
				}

				printSub(str, curr, index + 1);
				printSub(str, curr+str[index], index + 1);
			}
				
			int main() {
				
				string str = "ABC";
					
				printSub(str, "", 0);
				
				return 0;
			}
-----------------------------------------------------------------------
SUBSET SUM PROBLEM USING RECURSION:

	Prepare a tree which includes the current character and not includes the current character. This
	type of recursion problems are very important.
	I/P: [10,5,3,2,6] , sum = 8
	O/P: 2(5+3=8, 6+2 = 8)
	
	I/P: [1,2,3] , sum =4
	O/P: 1
	
	I/P: [10,20,15], sum = 37
	O/P: 0
	
	I/P: [10,20,15], sum = 0
	O/P: 1 , empty subset has sum as "0".
	
	int countSubsets(int arr[], int n, int sum)
		{
			if(n==0)
				return sum==0? 1 : 0;

			return countSubsets(arr, n-1, sum) + countSubsets(arr, n-1, sum - arr[n-1]);
		}
			
-----------------------------------------------------------------------
TOWER OF Hanoi:
	void ToH(int n, char A, char B, char C) 
		{ 
			if (n == 1) 
			{ 
				cout<<"Move 1 from " <<  A << " to " << C << endl; 
				return; 
			} 
			ToH(n-1, A, C, B); 
			cout<<"Move " << n << " from " <<  A << " to " << C << endl; 
			ToH(n-1, B, A, C); 
		}
-------------------------------------------------------------------------
JOSEPHU'S PROBLEM:
refer video lecture to understand the problem
the solution below is when the circle positions starts with "1" but not 0.
#include <iostream>
using namespace std;


int jos(int n, int k)
{
	if(n == 1)
		return 0;
	else
		return (jos(n - 1, k) + k) % n;
}

int myJos(int n, int k)
{
	return jos(n, k) + 1;
}
	
int main() {
	
	cout<<myJos(5, 3); 
	
	return 0;
}
----------------------------------------------------------------------------------
PRINTING ALL PERMUTATIONS OF A STRING:

I/P: S = "ABC"
O/P: ABC, ACB, BAC, BCA, CAB, CBA

I/P: S= "AB"
O/P: AB, BA

void permute(string str, int i,int j)
	{
		if (i == j-1)
			{
			    cout<<str<<endl;
			    return;
			}
		else
		{
			for (int k= i; k <= j-1; k++)
			{
				swap(str[i], str[k]);        // STL `swap()` used
 
        // recur for substring `str[i+1, n-1]`
        permute(str, i + 1, j);
 
        // backtrack (restore the string to its original state)
        swap(str[i], str[k]);
			}
		}
	}
s