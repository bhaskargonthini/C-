ANALYSIS OF ALGORITHMS:

Asymptotic analysis:
	- the idea is to measure the order of growth.
	- does not depend upon machine, language, etc.
	-No need to implement, we can analyse algorithms.

-Whether we do addition or subtraction or division it takes same time no matter how 
large the numbers are.

-if some expression is having having higher order of growth, then at some point 
it always takes more time than other expression with lesser order of growth.

--Direct way to find and compare growths:
	1) ignore lower order terms
	2) ignore leading term constant.
	eg: f(n) = 2n^2+n+6 => order of grwoth: n^2 (quadratic).
		g(n) = 100n+3 => order of growth: n (linear).
	**how do we compare terms?
		[c<loglogn<logn<n^1/3<n^1/2<n<n^2<n^3<n^4<2^n<n^n]
-------------------------------------
Big O notation:
			used to represent exact or upper bound of order of growth.
			Direct way:
				-Ignore lower order terms.
				-ignore leading term constant.
			eg: 3n^2+5n+6 = n^2;
	--Any constant values can be written as O(1).
		eg: 100, log2000, 10^4........(as long as there is no n in the term)
	--n/4, 2n+3..... = O(n)
	-- n^2+n, n^2+1000n ....... = O(n2)

Omega Notation:
	