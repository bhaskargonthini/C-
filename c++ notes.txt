Strings in C++:
=======================
#include<iostream>
using namespace std;

int main()
{
    char str[] = "gfg";
    cout << sizeof(str); size of string array is 4 here, since size of a character is 1 byte and (/0) at the end of the string.
    return 0; works only for char string, string size will be constant as its defined.
}
strlen(str): finds the length of the string.
strcmp(s1,s2): compares two strings and check if the both strings are lexicographically equal or not. returns 0 if both are equal, and returns 1 if not.
		eg: ac is lexicographically greater than ab. egs: gfg>abc, bcd = bcd.
strcpy(s1, s2): copies the string to the first argument. eg: strcpy(s1, "gfg").
c++ strings:
	-supports operators like +,<,>,==,<=,>= are possible.
	-they have dynamic size.
other functions in strings:
	str.substr(1,3): prints the substring.
	str.find("bob"): finds the substring insde the string. 
	returns the first index of the substring in the string
	eg: bobby = str.find(bob) = 0
** In c++ strings compiler stops reading the string if there is space between the strings. 
	to read the entire string along with spaces there is a new keyword getline.
eg: string str;
    cout << "Enter your name";
    getline(cin, str);
    cout << "\nYour name is " << str;
    return 0;	
	getline() also takes 3 arguments: getline(cin, str, 'a');
		it stops reading the string when it see the a charcater.
	Traversing of strings in c++:
		string str = "geeksforgeeks";
    for (int i = 0; i < str.length(); i++)
        cout << str[i];
    cout << endl;
    for (char x: str)
        cout << x;
		
--------------------------------------------------------------
References in C++:
===========================

	int x = 10;
    int &y = x;
    cout << y << " "; // y = 10
    x = x + 5;
    cout << y << " "; // y = 15
    y = y + 5;
    cout << x << " "; // x = 20
    return 0;
References are used in c++ to save memory and time. references will simply refer to the original values
instead of making a copy of it which takes memory and time to execute.

Applications: 
void Print(vector<int> &v) without &v it willmake a new copy of vector and prints it.
{
    for(auto x: v)
        cout << x << " ";
}

int main()
{
    vector<int> v;
    for (int i = 0; i<1000; i++)
        v.push_back(i);
    Print(v);
    return 0;
}
2)
 vector<int> vect{10, 20, 30, 40};
    for(auto x: vect)
        x = x+5;
    for (auto &x: vect)
        cout << x << " "; // 10, 20, 30, 40 without reference. // 15, 25,35,45 with reference.
    return 0;
	
	3)
	
	vector<string> vect{"geeksforgeeks practice", "geeksforgeeks ide", "geeksforgeeks write"};
    for (auto &x: vect)
        cout << x << " ";  we can use const auto &x if we dont need to change anything in the string instead of just accessing it. it will save time and memory.
    return 0;
-------------------------------------------------------------------
Pointers in c++:
=============================
1) void fun(int *ptr, int n)
    {
        for (int i= 0; i<n; i++)
            cout << ptr[i] << " "; // we can use ptr[i] to access the array elements.
    }
int main()
    {
        int arr[] = {10, 20, 30, 40, 50};
        fun(arr, 5);
    }
2)
int main() {
    char arr[] = {1, 2, 3};
    char *ptr = arr;
    cout << sizeof(arr) << " ";
    cout << sizeof(ptr) << " "; //o/p: 12 8 size of arr = 3*4bytes, size of ptr: size of address = 8. it does not depend of the type of address it stores.
    return 0;
}
3)
int main() {
    int arr[] = {10, 20};
    int *p1 = arr;
    ++*p1; // ++*p1 = ++(*p1) == value at p1 = 10 and then ++10 = 11. in prefix expressions, it always starts from right side = ++(*p1)
    cout << arr[0] << " " <<
        arr[1] << " " << *p1;// 11 20 11
    return 0;
}
4)
int main() {
    int arr[] = {10, 20};
    int *p2 = arr;
    *p2++; // *(p2++) = postfix always has higher prefrence so, *(address at p++) = 20
    cout << arr[0] << " " <<
        arr[1] << " " << *p2; // 10 20 20
    return 0;
}
5)
int main() {
    int arr[] = {10, 20};
    int *p3 = arr;
    *++p3;
    cout << arr[0] << " " <<
        arr[1] << " " << *p3; //10 20 20
    return 0;
}