BIT MAGIC|:
=========================================
Bitwise AND: eg: 0 0 = 0              Bitwise Left Shift: 3<<1 = 011 -> 110
				 1 0 = 0   								  3<<2 = 011 -> 1100
				 0 1 = 0								  3<<3 = 011 -> 11000
				 1 1 = 1			   --If we assume that the leading y bits are 0, then result of (x>>y) is
										equivalent to x*2^y.
Bitwise OR: eg:  0 0 = 0				eg: 3<<1 = 6 = 3*2^1
				 1 0 = 1					3<<2 = 12 = 3*2^2
				 0 1 = 1
				 1 1 = 1
				 
Bitwise XOR: eg: 0 0 = 0			Bitwise right Shift: 33>>1 = 100001 -> 0010000
				 1 0 = 1								 33>>2 = 100001 -> 0001000
				 0 0 = 1		       --x>>y is equivalent to |x/2^y|
				 1 1 = 0  									 eg: 33>>1 = 33/2^1 = 16
																 33>>2 = 33/2^2 = 8
Bitwise NOT: all the bits are inverted
		x = 1: x: 0000001  
		~x =   x: 1111110
		if all the bit values of a number are 1's
		then the value can be calculated as (2^n)-1
		where n is number of 1's.
		eg: 111 = (2^3)-1 = 7

Signed Input:
			signed numbers when they are negative will be stored using 
			2's compliment.
				2's compliment: 2^n-x
----------------------------------------------
problems:

Check Kth bit is set or not:
	Using left shift operator:
					void isKthBitSet(int n, int k) 
					{ 
						if (n & (1 << (k - 1))) 
							cout << "SET"; 
						else
							cout << "NOT SET"; 
					} 
	Using right shift operator:
					void isKthBitSet(int n, int k) 
					{ 
						if ((n >> (k - 1)) & 1) 
							cout << "SET"; 
						else
							cout << "NOT SET"; 
					} 
-----------------------------------------------------

Count set bits: 
	Naive solution:
			unsigned int countSetBits(unsigned int n) 
			{ 
				unsigned int count = 0; 
				while (n != 0) {        
					if (n % 2 != 0)      or if((n&1) == 1)
					   count++;				 count++;
					n = n/2;      			n = n>>1;
				} 
				return count; 
			} 
	Method 2 (BRIAN AND KERNINGHAM ALGORITHM):
	we can always unset the rightmost set bit in a number by doing 
			AND operation with (n-1).
			
			unsigned int countSetBits(int n)             101000       n = 40
			{                                            100111       n-1 = 39
				   unsigned int count = 0;               	40 & 39 = 100000 = 32 
				   while (n) {                              
					  n &= (n - 1);                       100000      n = 32 now       
					  count++;                            011111      n-1 = 31     
				   } 									  	32 & 31 = 0000000 = 0	
				  return count; 
			}
-----------------------------------------------------------
Bit Difference: 

			int countBitsFlip(int a, int b){
					
					// Your logic here
					a^= b;
					int count = 0;
					while(a>0){
						if(a & 1 == 1){               IMPORTANT LOGIC.
							count++;
						}
						a = a>>1;
					}
					return count;
				}		
-------------------------------------------------------------------
POWER OF 2:
				Given  a number, we need to find whether the given number is power of 2 or not.
					
				bool isPow2(int n)
				{
					if(n == 0)
						return false;
					
					return ((n & (n - 1)) == 0);
				}			
		what we doing here is, we unset the only set bit in the number,
		if the resultant number is 0 then it is power of 2.
			
----------------------------------------------------------------------
FIND THE ODD TIME OCCURING NUMBER IN AN ARRAY:
	XOR Operator properties:
		X^0 = X
		X^Y = Y^X
		X^(Y^Z) = (x^Y)^Z
		X^X = 0
		The logic is to do XOR operation on all numbers in an array.
			since X^X = 0, the even occuring numbers will cancel out 
			and only the odd occuring numbers will remain.
			eg: arr[] = {4,3,4,4,4,5,5} no(4) = 4, no(3) = 1, no(5)=2
			 so 3 will be the answer. 
	
	Another variation is to find the missing number in an array of n+1 numbers.
		given an array of n number that has values in range[1... n+1]. every no appears once, henc
		one no is missing. findthe missing no.
		sol: do xor of all the number in that array and take the resultant array
			and do xor with all the number from 1 to n.
---------------------------------------------------------------------------
 Two Odd Occurring:
	i/p: arr[] = {3,4,3,4,5,4,4,6,7,7}
	o/p: 5 6
	
soln: 	1) do xor of all numbers
			xor of arr[] = result = 5^6 101^110 = 011
		2) we consider binary repre of 3 as 011 and takes its last set bit
		3) Now divide the array into two groups such that one group is having
			the last bit as set and other group has last bit as unset.
				group1 {3,3,5,7,7}
				group2 {4,4,4,4,6} the reason for dividing them into two groups is 		
							In xor operation if the resultant is 1 then both the numbers has
							different set bits in that place.
		4) now we do xor of all in numbers in each group, the even occuring numbers will cancel out each other 
			and the odd occuing numbers remains. 
		void oddAppearing(int arr[], int n)
		{
			
				int xors = 0, res1 = 0, res2 = 0; 
				
				for (int i = 0; i < n; i++) 
				xors = xors ^ arr[i]; 
		  
		   
				int sn = xors & (~(xors - 1));  //IMPORTANT: expression to find the right most set bit in that number
		  
			
				for (int i = 0; i < n; i++) 
				{ 
					if ((arr[i] & sn) != 0) 
						res1 = res1 ^ arr[i]; 
					else
						res2 = res2 ^ arr[i]; 
				} 
				
				
				cout <<  res1 << " " << res2;
		}
											
 
 
 
 
 
 
 
 
 
 
 
 ---------------------------------------------------------------------------
SWAP ALL EVEN BITS AND ODD BITS:	
	eg: The task is to swap all odd bits with even bits. For example, if the given number is 23 (00010111), 
	it should be converted to 43(00101011). Here, every even position bit is swapped with adjacent bit on the 
	right side(even position bits are highlighted in the binary representation of 23),
	and every odd position bit is swapped with an adjacent on the left side.
		 unsigned int swapBits(unsigned int n)
   {
    // Your code here
       return (((n & 0xAAAAAAAA) >> 1) | ((n & 0x55555555) << 1));

   }
   
 ---------------------------------------------------------------------------
 GENERATING POWER SET OF GIVEN SET USING BITWISE OPERATOR:
	I/P: s = "abc"
	o/p: "", "a","b","c","ab","ac","bc","abc"
	
	I/P: s = "ab"
	O/P: "","a","b","ab"
	000 ""
	001 a
	010 b
	011 ab
	100 c         1 1 1
	101 ac        c b a
	110 bc
	111 abc
	 
	
	void printPowerSet(string str)
		{
			int n = str.length();

			int powSize = pow(2, n);

			for(int counter = 0; counter < powSize; counter++)
			{
				for(int j = 0; j < n; j++)
				{
					if((counter & (1 << j)) != 0)
						cout<<str[j];
				}
				
				cout<<endl;
			}
		}
   
